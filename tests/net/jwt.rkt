#lang typed/racket

(require typed/rackunit typed/json
         net/jwt/encode-decode
         net/jwt/structs
         net/jwt/misc
         option-bind)

(check-false
 (decode-jwt
  "eyJhbGciOiJIUzI1NiIsImtpZCI6IjhlN2EwMGYxZGFmMWMyYjcwMTU0NTlkZDY4Njg1NmMyIn0"))

(: jwt1 String)
;; A simple JWT like the default one produced by jwt.io:
(define jwt1-raw-header "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9")
(define jwt1-raw-payload
  "eyJzdWIiOjEyMzQ1Njc4OTAsIm5hbWUiOiJKb2huIERvZSIsImFkbWluIjp0cnVlfQ")
(define jwt1-signature "eoaDVGTClRdfxUZXiPs3f8FmJDkDE_VCQFXqKxpLsts")
(define jwt1
  (.join jwt1-raw-header jwt1-raw-payload jwt1-signature))

(: jwt2 String)
;; This JWT (also generated by jwt.io) is more like what Google produces
;; in their OAuth flow:
(define jwt2-raw-header
  "eyJhbGciOiJIUzI1NiIsImtpZCI6IjhlN2EwMGYxZGFmMWMyYjcwMTU0NTlkZDY4Njg1NmMyIn0")
(define jwt2-raw-payload
  "eyJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwiZXhwIjoxNDIxMzc2ODIyLCJzdWIiOiIxMjM0MTIzNTQzNzI2NTIzNDgxMjM5NjQ1MzIzMTQzNjU0Njc4OTIzIiwiZW1haWwiOiJqb3JkYW5AZXhhbXBsZS5jb20iLCJhdF9oYXNoIjoiOGU3YTAwZjFkYWYxYzJiNzAxNTQ1OWRkNjg2ODU2YzIiLCJhdWQiOiIxMjM0NTY3ODkuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhenAiOiIxMjM0NTY3ODkuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJpYXQiOjE0MjEzNzMyMjIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlfQ")
(define jwt2-signature "5ug4L3AdZR0dFC8t0EGDCxKWIxeQVkMwm9JYDn9E-BA")
(define jwt2 (.join jwt2-raw-header jwt2-raw-payload jwt2-signature))
(define jwt2-header
  (for/hasheq : (HashTable Symbol JSExpr)
    ([k '(alg     kid)]
     ;; TODO: RS256 is what Google seems to use.
     ;; Edit this test data accordingly.
     [v '("HS256" "8e7a00f1daf1c2b7015459dd686856c2")])
    (values k v)))
(define jwt2-claims : JWTClaimsSet
  (JWTClaimsSet "accounts.google.com" ; iss
                "1234123543726523481239645323143654678923" ; sub, user ID
                '("123456789.apps.googleusercontent.com") ; aud
                (seconds->date 1421376822) ; exp, integer expiration date, req'd
                #f ; no nbf
                (seconds->date 1421373222) ; iat, integer token issue time, req'd
                #f ; no jti        
                (for/hasheq : (HashTable Symbol JSExpr)
                  ([k '(email   ; user email address; do not use as a PK
                        at_hash ; access token hash
                        azp     ; client_id of the auth'd presenter (if â‰  aud)
                        email_verified ; #t if email addr has been verified
                        )]
                   [v '("jordan@example.com" ; email
                        "8e7a00f1daf1c2b7015459dd686856c2" ; AT hash
                        "123456789.apps.googleusercontent.com" ; azp
                        #t)])
                  (values k v))))
(define jwt2-secret "secret")

(: jwt1-header (HashTable Symbol JSExpr))
(define jwt1-header
  (for/hasheq : (HashTable Symbol JSExpr) ([k '(alg     typ)]
                                           [v '("HS256" "JWT")])
    (values k v)))

(: jwt1-claims JWTClaimsSet)
(define jwt1-claims
  (JWTClaimsSet #f
                "1234567890"
                '()
                #f
                #f
                #f
                #f
                (for/hasheq : (HashTable Symbol JSExpr) ([k '(name admin)]
                                                         [v '("John Doe"
                                                              #t)])
                  (values k v))))

(check-equal? (decode-jwt jwt1)
              (decoded-jwt jwt1-header jwt1-raw-header jwt1-claims
                           jwt1-raw-payload jwt1-signature))
(check-equal? (decode-jwt jwt2)
              (decoded-jwt jwt2-header jwt2-raw-header jwt2-claims
                           jwt2-raw-payload jwt2-signature))
(check-equal? (?<- (lambda ([x : JWT]) (verify-jwt x "secret"))
                   (decode-jwt jwt1))
              (verified-jwt jwt1-header jwt1-raw-header
                            jwt1-claims jwt1-raw-payload
                            jwt1-signature))
(check-equal? (?<- (lambda ([x : JWT]) (verify-jwt x "secret"))
                   (decode-jwt jwt2))
              (verified-jwt jwt2-header jwt2-raw-header
                           jwt2-claims jwt2-raw-payload
                           jwt2-signature))
(check-false (?<- (lambda ([x : JWT]) (verify-jwt x "not the secret"))
                  (decode-jwt jwt2)))
(check-equal? (decode/verify jwt1 "secret")
              (verified-jwt jwt1-header jwt1-raw-header
                            jwt1-claims jwt1-raw-payload
                            jwt1-signature))
(check-equal? (decode/verify jwt2 "secret")
              (verified-jwt jwt2-header jwt2-raw-header
                            jwt2-claims jwt2-raw-payload
                            jwt2-signature))





