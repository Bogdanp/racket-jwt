#lang typed/racket

(provide (struct-out JWT)
         decode-jwt
         )

(require typed/json
         typed/net/base64)

(struct JWT ([header : JSExpr]
             [claims : JSExpr]
             [secret : String])
  #:transparent)

;; HeaderParam represents a JSON Header Parameter.
;; From https://tools.ietf.org/html/draft-ietf-jose-json-web-signature-41
;; (JOSE Working Group draft paper on JSON Web Signature (JWS), 16 Jan 2015).
;; XXX Expires on 20 Jul 2015.
(define-type HeaderParam
  (U 'alg ; Algorithm - MUST be present
     'jku ; JWK Set URL  - OPTIONAL
     'jwk ; JSON Web Key - OPTIONAL
     'kid ; Key ID       - OPTIONAL, value MUST be a case-sensitive string
     'x5u ; X.509 URL    - OPTIONAL
     'x5c ; X.509 Cert/Chain - OPTIONAL; we MUST validate (RFC5280) if present
          ; Corresponds to the key used to sign the JWS.
     'x5t ; X.509 Cert SHA-1 Thumbprint - OPTIONAL
     'x5t#S256 ; X.509 Certificate SHA-256 Thumbprint - OPTIONAL
     'typ ; MIME Media Type of JWS - OPTIONAL
     'cty ; Content Type (MIME type of payload) - OPTIONAL
     'crit ; Critical - OPTIONAL, but indicates extensions are being used
           ; that MUST be understood by our impl; if not, the JWS is invalid.
     ))

(: valid-jwt? (->* (String) (#:supported-header-params (Listof HeaderParam))
                   Boolean))
(define (valid-jwt? s
                    #:supported-header-params [supported-header-params
                                               '(alg kid)])
  (let/ec fail : False
    (unless (regexp-match #rx"\\." s)
      (fail #f))
    (when (regexp-match #px"\\s" s)
      (fail #f))
    
    (with-handlers ([exn:fail:contract? (lambda (e) (fail #f))]
                    [exn:fail:read? (lambda (e) (fail #f))])
      (match (string-split s ".")
        [(list h p s)
         (define h/end (try-decoding h))
         (when (eof-object? h/end) (fail #f))
         (define p/end (try-decoding p))
         (when (eof-object? p/end) (fail #f))
         ;; TODO:
         ;; - verify that we understand and can process all fields required
         ;;   by the JWS spec, the algorithm designated in the header, and
         ;;   the 'crit header parameter (if present), and that the fields'
         ;;   values are all understood & supported.
         (define sig (base64-decode (string->bytes/utf-8 s)))
         #| TODO:
        Validate the JWS Signature against the JWS Signing Input
        ASCII(BASE64URL(UTF8(JWS Protected Header)) || '.' ||
        BASE64URL(JWS Payload)) -- that's (string-append h "." p) here --
        in the manner defined for the algorithm
        being used, which MUST be accurately represented by the value of
        the "alg" (algorithm) Header Parameter, which MUST be present.
        See Section 10.6 for security considerations on algorithm
        validation.  Record whether the validation succeeded or not.

        TODO:
        If the JWS JSON Serialization is being used, repeat this process
        (steps 4-8) for each digital signature or MAC value contained in
        the representation.
|#
         #t
         ]
        [(list h p s _ _)
         ;; XXX This is a JWE (cf. Section 9 of
         ;; https://tools.ietf.org/html/draft-ietf-jose-json-web-encryption-40
         ;; ) and we don't support it.
         (fail #f)]
        [_ (fail #f)]))
    #t))

(module+ test
  (require typed/rackunit typed/json)
  (define missing-period "eyJhbGciOiJIUzI1NiIsImtpZCI6IjhlN2EwMGYxZGFmMWMyYjcwMTU0NTlkZDY4Njg1NmMyIn0")
  (check-false (valid-jwt? missing-period))
  ;; TODO: Add tests for other fail cases, and for a success case.
  )

(: decode-jwt (String -> (Option JWT)))
(define (decode-jwt jwt)
  (let/ec fail : False
    (: decode/read (String -> (Option JSExpr)))
    (define (decode/read s)
      (define maybe-decoded (try-decoding s))
      (if (eof-object? maybe-decoded)
          (fail #f)
          maybe-decoded))
    
    (define-values (header-string payload-string secret)
      (match (string-split jwt ".")
        [(list h p s) (values h p s)]
        [_ (fail #f)]))
    
    (define header (decode/read header-string))
    (define claims (decode/read payload-string))
    
    (and header claims secret (JWT header claims secret))))

(module+ test  
  (: jwt1 String)
  ;; A simple JWT like the default one produced by jwt.io:
  (define jwt1 "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEyMzQ1Njc4OTAsIm5hbWUiOiJKb2huIERvZSIsImFkbWluIjp0cnVlfQ.eoaDVGTClRdfxUZXiPs3f8FmJDkDE_VCQFXqKxpLsts")
  
  (: jwt2 String)
  ;; This JWT (also generated by jwt.io) is more like what Google produces
  ;; in their OAuth flow:
  (define jwt2 "eyJhbGciOiJIUzI1NiIsImtpZCI6IjhlN2EwMGYxZGFmMWMyYjcwMTU0NTlkZDY4Njg1NmMyIn0.eyJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwiZXhwIjoxNDIxMzc2ODIyLCJzdWIiOiIxMjM0MTIzNTQzNzI2NTIzNDgxMjM5NjQ1MzIzMTQzNjU0Njc4OTIzIiwiZW1haWwiOiJqb3JkYW5AZXhhbXBsZS5jb20iLCJhdF9oYXNoIjoiOGU3YTAwZjFkYWYxYzJiNzAxNTQ1OWRkNjg2ODU2YzIiLCJhdWQiOiIxMjM0NTY3ODkuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhenAiOiIxMjM0NTY3ODkuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJpYXQiOjE0MjEzNzMyMjIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlfQ.5ug4L3AdZR0dFC8t0EGDCxKWIxeQVkMwm9JYDn9E-BA")
  (define jwt2-header
    (for/hasheq : (HashTable Symbol JSExpr)
      ([k '(alg     kid)]
       ;; TODO: RS256 is what Google seems to use.
       ;; Edit this test data accordingly.
       [v '("HS256" "8e7a00f1daf1c2b7015459dd686856c2")])
      (values k v)))
  (define jwt2-claims
    (for/hasheq : (HashTable Symbol JSExpr)
      ([k '(iss     ; issuer, req'd
            exp     ; integer expiration date, req'd
            sub     ; user ID, unique across Google accts, req'd
            email   ; user email address; do not use as a PK
            at_hash ; access token hash
            aud     ; intended audience for token (i.e., client app ID) req'd
            azp     ; client_id of the authorized presenter (if â‰  aud)
            iat     ; integer token issue time, req'd
            email_verified ; #t if email addr has been verified
            )]
       [v '("accounts.google.com" ; issuer
            1421376822 ; exp time
            "1234123543726523481239645323143654678923" ;user ID
            "jordan@example.com" ; email
            "8e7a00f1daf1c2b7015459dd686856c2" ; AT hash
            "123456789.apps.googleusercontent.com" ; aud
            "123456789.apps.googleusercontent.com" ; azp
            1421373222 ; issue time
            #t)])
      (values k v)))
  (define jwt2-secret "secret")
  (define jwt2-secret-enc "5ug4L3AdZR0dFC8t0EGDCxKWIxeQVkMwm9JYDn9E-BA")
  
  (: jwt1-header JSExpr)
  (define jwt1-header
    (for/hasheq : (HashTable Symbol JSExpr) ([k '(alg     typ)]
                                             [v '("HS256" "JWT")])
      (values k v)))
  
  (: jwt1-claims JSExpr)
  (define jwt1-claims
    (for/hasheq : (HashTable Symbol JSExpr) ([k '(name admin sub)]
                                             [v '("John Doe"
                                                  #t
                                                  1234567890)])
      (values k v)))
  
  (check-equal? (decode-jwt jwt1)
                (JWT jwt1-header jwt1-claims
                     "eoaDVGTClRdfxUZXiPs3f8FmJDkDE_VCQFXqKxpLsts"))
  (check-equal? (decode-jwt jwt2)
                (JWT jwt2-header jwt2-claims jwt2-secret-enc))
  )

(: try-decoding (String -> (U EOF JSExpr)))
(define (try-decoding s)
  (read-json (open-input-bytes (base64-decode (string->bytes/utf-8 s)))))