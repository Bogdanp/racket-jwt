#lang typed/racket

(provide (struct-out JWT)
         decode-jwt
         )

(require typed/json
         typed/net/base64)

(struct JWT ([header : JSExpr]
             [claims : JSExpr]
             [secret : String])
  #:transparent)

(: decode-jwt (String -> (Option JWT)))
(define (decode-jwt jwt)
  (let/ec fail : False
    (: decode/read (String -> (Option JSExpr)))
    (define (decode/read s)
      (define maybe-decoded
        (read-json
         (open-input-bytes (base64-decode (string->bytes/utf-8 s)))))
      (if (eof-object? maybe-decoded)
          (fail #f)
          maybe-decoded))
    
    (define-values (header-string payload-string secret)
      (match (string-split jwt ".")
        [(list h p s) (values h p s)]
        [_ (fail #f)]))
    
    (define header (decode/read header-string))
    (define claims (decode/read payload-string))
    
    (and header claims secret (JWT header claims secret))))

(module+ test
  (require typed/rackunit typed/json)
  
  (: jwt1 String)
  ;; A simple JWT like the default one produced by jwt.io:
  (define jwt1 "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEyMzQ1Njc4OTAsIm5hbWUiOiJKb2huIERvZSIsImFkbWluIjp0cnVlfQ.eoaDVGTClRdfxUZXiPs3f8FmJDkDE_VCQFXqKxpLsts")
  
  (: jwt2 String)
  ;; This JWT (also generated by jwt.io) is more like what Google produces
  ;; in their OAuth flow:
  (define jwt2 "eyJhbGciOiJIUzI1NiIsImtpZCI6IjhlN2EwMGYxZGFmMWMyYjcwMTU0NTlkZDY4Njg1NmMyIn0.eyJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwiZXhwIjoxNDIxMzc2ODIyLCJzdWIiOiIxMjM0MTIzNTQzNzI2NTIzNDgxMjM5NjQ1MzIzMTQzNjU0Njc4OTIzIiwiZW1haWwiOiJqb3JkYW5AZXhhbXBsZS5jb20iLCJhdF9oYXNoIjoiOGU3YTAwZjFkYWYxYzJiNzAxNTQ1OWRkNjg2ODU2YzIiLCJhdWQiOiIxMjM0NTY3ODkuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhenAiOiIxMjM0NTY3ODkuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJpYXQiOjE0MjEzNzMyMjIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlfQ.5ug4L3AdZR0dFC8t0EGDCxKWIxeQVkMwm9JYDn9E-BA")
  (define jwt2-header
    (for/hasheq : (HashTable Symbol JSExpr)
      ([k '(alg     kid)]
       ;; TODO: RS256 is what Google seems to use.
       ;; Edit this test data accordingly.
       [v '("HS256" "8e7a00f1daf1c2b7015459dd686856c2")])
      (values k v)))
  (define jwt2-claims
    (for/hasheq : (HashTable Symbol JSExpr)
      ([k '(iss     ; issuer, req'd
            exp     ; integer expiration date, req'd
            sub     ; user ID, unique across Google accts, req'd
            email   ; user email address; do not use as a PK
            at_hash ; access token hash
            aud     ; intended audience for token (i.e., client app ID) req'd
            azp     ; client_id of the authorized presenter (if â‰  aud)
            iat     ; integer token issue time, req'd
            email_verified ; #t if email addr has been verified
            )]
       [v '("accounts.google.com" ; issuer
            1421376822 ; exp time
            "1234123543726523481239645323143654678923" ;user ID
            "jordan@example.com" ; email
            "8e7a00f1daf1c2b7015459dd686856c2" ; AT hash
            "123456789.apps.googleusercontent.com" ; aud
            "123456789.apps.googleusercontent.com" ; azp
            1421373222 ; issue time
            #t)])
      (values k v)))
  (define jwt2-secret "secret")
  (define jwt2-secret-enc "5ug4L3AdZR0dFC8t0EGDCxKWIxeQVkMwm9JYDn9E-BA")
  
  (: jwt1-header JSExpr)
  (define jwt1-header
    (for/hasheq : (HashTable Symbol JSExpr) ([k '(alg     typ)]
                                             [v '("HS256" "JWT")])
      (values k v)))
  
  (: jwt1-claims JSExpr)
  (define jwt1-claims
    (for/hasheq : (HashTable Symbol JSExpr) ([k '(name admin sub)]
                                             [v '("John Doe"
                                                  #t
                                                  1234567890)])
      (values k v)))
  
  (check-equal? (decode-jwt jwt1)
                (JWT jwt1-header jwt1-claims
                     "eoaDVGTClRdfxUZXiPs3f8FmJDkDE_VCQFXqKxpLsts"))
  (check-equal? (decode-jwt jwt2)
                (JWT jwt2-header jwt2-claims jwt2-secret-enc))
  )